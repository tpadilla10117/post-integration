### Notes:
- iat = Issued At -> refers to when a token was issued
- Original Frontend script: "start": "react-scripts start"

## jsonwebtoken:
- Eg. const token = jwt.sign({ id: 3, username: 'joshua' }, 'server secret', { expiresIn: '1h' }); // allows you to forve users to reauthenticate

## Frontend Requests:
- e.g. fetch('our api url', {
  method: 'SOME_METHOD',
  headers: {
    'Content-Type': 'application/json',
    'Authorization': 'Bearer HOLYMOLEYTHISTOKENISHUGE'
  },
  body: JSON.stringify({})
})

- Authorization -> needs a token passed in
- Content-Type -> bodyParser middleware reads off what we need from the user

    ### Testing:
    - Run `npm run start:dev` in one terminal, then in another try:
        - curl http://localhost:3000
        - curl http://localhost:3000/api
        - curl http://localhost:3000/api -H 'Authorization: Bearer xyz'
        - curl http://localhost:3000/api -H 'Authorization: The Bears xyz'
        - curl http://localhost:3000/api/posts

## Heroku Deploy:
- In terminal : `heroku login`
- For Deploys: 
- git config --global user.name `Your Name`
- git config --global user.email `your_email@real_email.edu`
- git config --global credential.helper cache --timeout=3600
- `heroku create`
- To check whether a remote named heroku has been set for your app: `git remote -v`
- `git remote origin heroku`
- `git push heroku master`
- Configure your API KEY -> `heroku config:set WEATHER_KEY="YOUR KEY HERE"`

## Heroku Troubleshooting:

- To Locate your db on heroku: `heroku pg:info`
- To check if your db has been provisioned: `heroku addons`
- To provision a postgresql db with CLI command: `heroku addons:create heroku-postgresql:<PLAN_NAME>`
- To configure a buildpack: `heroku buildpacks:set heroku/nodejs`
- To check the logs of the heroku app: `heroku logs --tail`

- To Launch scripts: E.G. `heroku run npm run db:build`


- May need to configure SSL: 

The issue here: Heroku requires an SSL connection, but we are not enforcing it in our code. We can do one of 2 things. The right way is to code it in the project as explained in the heroku documentation on postgresql. In our code, we can set the connection string as follows, only setting a ssl entry if we are in production (in the heroku deployment)

// db/index.js

const client = new Client({
  connectionString: process.env.DATABASE_URL || 'postgres://localhost:5432/juicebox-dev',
  ssl: process

OR you can enter this in your terminal : `heroku config:set PGSSLMODE=no-verify`

- To authenticate user -> `psql --host=ec2-54-225-228-142.compute-1.amazonaws.com --port=5432 --username=jqxxvdahzcxrkm --password --dbname=dcmf2ik878d53q`